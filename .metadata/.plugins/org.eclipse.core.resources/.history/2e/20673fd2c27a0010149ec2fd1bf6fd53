package com.feedbackfusion.presentation;

import com.feedbackfusion.model.Feedback;
import com.feedbackfusion.service.FeedbackService;

import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

/**
 * <h1>FeedbackForm</h1>
 * <p>
 * AWT-based graphical user interface for the Feedback Fusion application.
 * This class provides a window for managing feedback records with standard
 * CRUD operations (Create, Read, Update, Delete) via {@link FeedbackService}.
 * </p>
 *
 * <h2>Design Overview</h2>
 * <ul>
 *   <li><b>Background Image Support:</b> Optionally draws a background image
 *       behind all UI components for improved aesthetics.</li>
 *   <li><b>Form Inputs:</b> ID, Category (Choice), Rating, Comments.</li>
 *   <li><b>Actions:</b> Buttons to create, read all, update, delete, and clear the form.</li>
 *   <li><b>Status Feedback:</b> A single-line status label shows success or error messages.</li>
 *   <li><b>List Display:</b> Multi-line, read-only text area displays query results.</li>
 * </ul>
 *
 * <h2>Threading Model</h2>
 * <p>
 * This class is single-threaded with respect to the Event Dispatch Thread (EDT).
 * All database operations are synchronous, and exceptions are caught and displayed
 * to the user in the status label.
 * </p>
 *
 * <h2>Transparency & Visuals</h2>
 * <p>
 * Child panels are transparent so the background image is visible. The list area
 * uses a semi-transparent white background to maintain text readability.
 * </p>
 *
 * @author Rohan Bansal
 * @version 1.2
 * @since 1.0
 */
public class FeedbackForm extends Frame {

    /** Service layer for all feedback CRUD operations */
    private final FeedbackService service;

    // --------------------
    // UI COMPONENTS
    // --------------------
    private final TextField idField = new TextField(6);
    private final Choice typeChoice = new Choice();
    private final TextField ratingField = new TextField(5);
    private final TextArea commentsArea = new TextArea(4, 40);
    private final TextArea listArea = new TextArea(12, 60);
    private final Label statusLabel = new Label(" ");

    /** Background image to render behind the UI; may be null */
    private Image backgroundImage;

    /**
     * Constructs and initializes the FeedbackForm UI.
     * <p>
     * Sets up the main window, loads the optional background image,
     * initializes form components, configures event handlers, and
     * displays the window.
     * </p>
     *
     * @param service non-null {@link FeedbackService} instance for performing all CRUD operations
     * @throws IllegalArgumentException if {@code service} is null
     */
    public FeedbackForm(FeedbackService service) {
        if (service == null) {
            throw new IllegalArgumentException("FeedbackService cannot be null.");
        }
        this.service = service;

        loadBackgroundImage();
        initializeWindow();
        initializeUIComponents();
        wireEventHandlers();

        setVisible(true);
    }

    // --------------------
    // PRIVATE INITIALIZATION METHODS
    // --------------------

    /** Loads the background image from resources; falls back gracefully if not found */
    private void loadBackgroundImage() {
        try {
            backgroundImage = ImageIO.read(new File("resources/background.png"));
        } catch (IOException e) {
            System.out.println("‚ö† Background image not found, using plain color.");
            backgroundImage = null;
        }
    }

    /** Sets up the main window properties */
    private void initializeWindow() {
        setTitle("Feedback Fusion");
        setSize(700, 600);
        setLayout(new BorderLayout());
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                dispose();
                System.exit(0);
            }
        });
    }

    /** Initializes all UI components and layouts */
    private void initializeUIComponents() {
        // --------------------
        // Content panel with custom painting
        // --------------------
        Panel contentPanel = new Panel(new BorderLayout(10, 10)) {
            @Override
            public void paint(Graphics g) {
                if (backgroundImage != null) {
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                }
                super.paint(g);
            }
        };
        add(contentPanel);

        // Header
        Label header = new Label("Feedback Fusion", Label.CENTER);
        header.setFont(new Font("Serif", Font.BOLD, 26));
        header.setForeground(new Color(0, 80, 160));
        header.setBackground(new Color(0, 0, 0, 0));
        contentPanel.add(header, BorderLayout.NORTH);

        // Form panel
        Panel form = new Panel(new GridBagLayout());
        form.setBackground(new Color(0, 0, 0, 0));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 10, 8, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // ID
        gbc.gridx = 0; gbc.gridy = 0;
        form.add(new Label("ID (for Update/Delete):"), gbc);
        gbc.gridx = 1; form.add(idField, gbc);

        // Category
        gbc.gridx = 0; gbc.gridy = 1;
        form.add(new Label("Category:"), gbc);
        typeChoice.add("Food Quality");
        typeChoice.add("Service");
        typeChoice.add("Ambiance");
        typeChoice.add("Cleanliness");
        gbc.gridx = 1; form.add(typeChoice, gbc);

        // Rating
        gbc.gridx = 0; gbc.gridy = 2;
        form.add(new Label("Rating (1-5):"), gbc);
        gbc.gridx = 1; form.add(ratingField, gbc);

        // Comments
        gbc.gridx = 0; gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.NORTH;
        form.add(new Label("Comments:"), gbc);
        gbc.gridx = 1; gbc.anchor = GridBagConstraints.CENTER;
        form.add(commentsArea, gbc);

        contentPanel.add(form, BorderLayout.CENTER);

        // South panel
        Panel south = new Panel(new BorderLayout(10, 10));
        south.setBackground(new Color(0, 0, 0, 0));

        // Buttons
        Panel buttons = new Panel(new FlowLayout(FlowLayout.CENTER, 15, 10));
        buttons.setBackground(new Color(0, 0, 0, 0));
        Button createBtn = new Button("Create");
        Button readBtn = new Button("Read All");
        Button updateBtn = new Button("Update");
        Button deleteBtn = new Button("Delete");
        Button clearBtn = new Button("Clear Fields");

        // Button colors
        createBtn.setBackground(new Color(0, 153, 76)); createBtn.setForeground(Color.WHITE);
        readBtn.setBackground(new Color(0, 102, 204)); readBtn.setForeground(Color.WHITE);
        updateBtn.setBackground(new Color(255, 153, 0)); updateBtn.setForeground(Color.WHITE);
        deleteBtn.setBackground(new Color(204, 0, 0)); deleteBtn.setForeground(Color.WHITE);
        clearBtn.setBackground(new Color(120, 120, 120)); clearBtn.setForeground(Color.WHITE);

        buttons.add(createBtn); buttons.add(readBtn); buttons.add(updateBtn);
        buttons.add(deleteBtn); buttons.add(clearBtn);
        south.add(buttons, BorderLayout.NORTH);

        // Status
        statusLabel.setForeground(Color.DARK_GRAY);
        statusLabel.setBackground(new Color(0, 0, 0, 0));
        south.add(statusLabel, BorderLayout.CENTER);

        // List area
        listArea.setEditable(false);
        listArea.setBackground(new Color(255, 255, 255, 150));
        south.add(listArea, BorderLayout.SOUTH);

        contentPanel.add(south, BorderLayout.SOUTH);

        // Event wiring
        createBtn.addActionListener(e -> onCreate());
        readBtn.addActionListener(e -> onReadAll());
        updateBtn.addActionListener(e -> onUpdate());
        deleteBtn.addActionListener(e -> onDelete());
        clearBtn.addActionListener(e -> clearFields());
    }

    // --------------------
    // CRUD OPERATIONS
    // --------------------

    /**
     * Handles creation of a new feedback record.
     * Validates input and delegates to {@link FeedbackService#create(Feedback)}.
     */
    private void onCreate() {
        try {
            String type = typeChoice.getSelectedItem();
            int rating = Integer.parseInt(ratingField.getText().trim());
            String comments = commentsArea.getText().trim();

            service.create(new Feedback(type, rating, comments));
            statusOk("‚úÖ Created successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå Rating must be a number.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    /**
     * Reads all feedback records and displays them in the list area.
     * Delegates to {@link FeedbackService#findAll()}.
     */
    private void onReadAll() {
        try {
            List<Feedback> list = service.findAll();
            StringBuilder sb = new StringBuilder();
            sb.append("ID\tType\tRating\tComments\n");
            sb.append("-------------------------------------------------------------\n");
            for (Feedback f : list) {
                sb.append(f.getId()).append('\t')
                  .append(f.getFeedbackType()).append('\t')
                  .append(f.getRating()).append('\t')
                  .append(f.getComments() == null ? "" :
                          f.getComments().replace('\n', ' '))
                  .append('\n');
            }
            listArea.setText(sb.toString());
            listArea.repaint();
            statusOk("üìÉ Loaded " + list.size() + " record(s).");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    /**
     * Updates an existing feedback record.
     * Parses the ID and validates all inputs before calling {@link FeedbackService#update(Feedback)}.
     */
    private void onUpdate() {
        try {
            int id = Integer.parseInt(idField.getText().trim());
            String type = typeChoice.getSelectedItem();
            int rating = Integer.parseInt(ratingField.getText().trim());
            String comments = commentsArea.getText().trim();

            service.update(new Feedback(id, type, rating, comments));
            statusOk("‚úèÔ∏è Updated ID " + id + " successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå ID and Rating must be numbers.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    /**
     * Deletes a feedback record based on the ID field.
     * Delegates to {@link FeedbackService#delete(int)}.
     */
    private void onDelete() {
        try {
            int id = Integer.parseInt(idField.getText().trim());
            service.delete(id);
            statusOk("üóëÔ∏è Deleted ID " + id + " successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå ID must be a number.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    /**
     * Clears all form fields and resets the category choice.
     */
    private void clearFields() {
        idField.setText("");
        ratingField.setText("");
        commentsArea.setText("");
        typeChoice.select(0);
        statusOk("Form cleared.");
    }

    /**
     * Displays a success message in the status label.
     *
     * @param msg the message to display
     */
    private void statusOk(String msg) {
        statusLabel.setForeground(new Color(0, 128, 0));
        statusLabel.setText(msg);
        statusLabel.repaint();
    }

    /**
     * Displays an error message in the status label.
     *
     * @param msg the message to display
     */
    private void statusErr(String msg) {
        statusLabel.setForeground(Color.RED);
        statusLabel.setText(msg);
        statusLabel.repaint();
    }
}
