package com.feedbackfusion.presentation;

import com.feedbackfusion.model.Feedback;
import com.feedbackfusion.service.FeedbackService;

import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

/**
 * <h1>FeedbackForm</h1>
 * <p>
 * AWT-based GUI for the Feedback Fusion application. This window provides a simple
 * interface to perform CRUD operations (Create, Read, Update, Delete) on feedback
 * records via a {@link FeedbackService}. It also displays status messages and
 * supports an optional background image.
 * </p>
 *
 * <h2>Main UI Areas</h2>
 * <ul>
 *   <li><b>Header</b> ‚Äî Window title</li>
 *   <li><b>Form</b> ‚Äî Inputs for ID, Category, Rating, and Comments</li>
 *   <li><b>Controls</b> ‚Äî Buttons for Create, Read All, Update, Delete, Clear Fields</li>
 *   <li><b>Status</b> ‚Äî A line that shows success or error messages</li>
 *   <li><b>List</b> ‚Äî A text area showing formatted query results (Read All)</li>
 * </ul>
 *
 * <h2>Background Image</h2>
 * <p>
 * Optionally draws an image behind the UI. The code attempts to load
 * {@code src/resources/background.png}. If not found, the UI falls back
 * to a plain color background.
 * </p>
 *
 * <h2>Threading</h2>
 * <p>
 * This AWT UI is single-threaded with respect to the Event Dispatch Thread (EDT).
 * Database calls are performed synchronously for simplicity and are wrapped with
 * exception handling that surfaces messages in the status label.
 * </p>
 *
 * @author Rohan Bansal
 * @version 1.0
 * @since 1.0
 */
public class FeedbackForm extends Frame {

    private final FeedbackService service;

    private final TextField idField = new TextField(6);
    private final Choice typeChoice = new Choice();
    private final TextField ratingField = new TextField(5);
    private final TextArea commentsArea = new TextArea(4, 40);
    private final TextArea listArea = new TextArea(12, 60);
    private final Label statusLabel = new Label(" ");

    private Image backgroundImage;

    public FeedbackForm(FeedbackService service) {
        this.service = service;

        // Load background image (optional)
        try {
            backgroundImage = ImageIO.read(
                    new File("resources/background.png")
            );
        } catch (IOException e) {
            System.out.println("‚ö† Background image not found, using plain color.");
            backgroundImage = null;
        }

        // Window setup
        setTitle("Feedback Fusion");
        setSize(700, 600);
        setLayout(new BorderLayout());

        // Content panel with custom paint for background image
        Panel contentPanel = new Panel(new BorderLayout(10, 10)) {
            @Override
            public void paint(Graphics g) {
                if (backgroundImage != null) {
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                }
                super.paint(g);
            }
        };
        add(contentPanel);

        // Header
        Label header = new Label("Feedback Fusion", Label.CENTER);
        header.setFont(new Font("Serif", Font.BOLD, 26));
        header.setForeground(new Color(0, 80, 160));
        contentPanel.add(header, BorderLayout.NORTH);

        // Center form
        Panel form = new Panel(new GridBagLayout());
        form.setBackground(new Color(255, 255, 255, 180)); // semi-transparent
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 10, 8, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Row 0: ID
        gbc.gridx = 0; gbc.gridy = 0;
        form.add(new Label("ID (for Update/Delete):"), gbc);
        gbc.gridx = 1; form.add(idField, gbc);

        // Row 1: Category
        gbc.gridx = 0; gbc.gridy = 1;
        form.add(new Label("Category:"), gbc);
        typeChoice.add("Food Quality");
        typeChoice.add("Service");
        typeChoice.add("Ambiance");
        typeChoice.add("Cleanliness");
        gbc.gridx = 1; form.add(typeChoice, gbc);

        // Row 2: Rating
        gbc.gridx = 0; gbc.gridy = 2;
        form.add(new Label("Rating (1-5):"), gbc);
        gbc.gridx = 1; form.add(ratingField, gbc);

        // Row 3: Comments
        gbc.gridx = 0; gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.NORTH;
        form.add(new Label("Comments:"), gbc);
        gbc.gridx = 1; gbc.anchor = GridBagConstraints.CENTER;
        form.add(commentsArea, gbc);

        contentPanel.add(form, BorderLayout.CENTER);

        // South panel (buttons + status + list)
        Panel south = new Panel(new BorderLayout(10, 10));

        // Buttons row
        Panel buttons = new Panel(new FlowLayout(FlowLayout.CENTER, 15, 10));
        buttons.setBackground(new Color(255, 255, 255, 0)); // fully transparent

        Button createBtn = new Button("Create");
        Button readBtn   = new Button("Read All");
        Button updateBtn = new Button("Update");
        Button deleteBtn = new Button("Delete");
        Button clearBtn  = new Button("Clear Fields");

        createBtn.setBackground(new Color(0, 153, 76)); createBtn.setForeground(Color.WHITE);
        readBtn.setBackground(new Color(0, 102, 204)); readBtn.setForeground(Color.WHITE);
        updateBtn.setBackground(new Color(255, 153, 0)); updateBtn.setForeground(Color.WHITE);
        deleteBtn.setBackground(new Color(204, 0, 0)); deleteBtn.setForeground(Color.WHITE);
        clearBtn.setBackground(new Color(120, 120, 120)); clearBtn.setForeground(Color.WHITE);

        buttons.add(createBtn);
        buttons.add(readBtn);
        buttons.add(updateBtn);
        buttons.add(deleteBtn);
        buttons.add(clearBtn);

        south.add(buttons, BorderLayout.NORTH);

        // Status label
        statusLabel.setForeground(Color.DARK_GRAY);
        statusLabel.setBackground(new Color(255, 255, 255, 0)); // transparent
        south.add(statusLabel, BorderLayout.CENTER);

        // List area
        listArea.setEditable(false);
        listArea.setBackground(new Color(255, 255, 255, 150)); // semi-transparent
        south.add(listArea, BorderLayout.SOUTH);

        contentPanel.add(south, BorderLayout.SOUTH);

        // Actions
        createBtn.addActionListener(e -> onCreate());
        readBtn.addActionListener(e -> onReadAll());
        updateBtn.addActionListener(e -> onUpdate());
        deleteBtn.addActionListener(e -> onDelete());
        clearBtn.addActionListener(e -> clearFields());

        // Window close handler
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                dispose();
                System.exit(0);
            }
        });

        setVisible(true);
        repaint(); // force repaint of background
    }

    private void onCreate() {
        try {
            String type = typeChoice.getSelectedItem();
            int rating = Integer.parseInt(ratingField.getText().trim());
            String comments = commentsArea.getText().trim();

            service.create(new Feedback(type, rating, comments));
            statusOk("‚úÖ Created successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå Rating must be a number.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    private void onReadAll() {
        try {
            List<Feedback> list = service.findAll();
            StringBuilder sb = new StringBuilder();
            sb.append("ID\tType\tRating\tComments\n");
            sb.append("-------------------------------------------------------------\n");
            for (Feedback f : list) {
                sb.append(f.getId()).append('\t')
                  .append(f.getFeedbackType()).append('\t')
                  .append(f.getRating()).append('\t')
                  .append(f.getComments() == null ? "" :
                           f.getComments().replace('\n', ' '))
                  .append('\n');
            }
            listArea.setText(sb.toString());
            listArea.repaint();
            statusOk("üìÉ Loaded " + list.size() + " record(s).");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    private void onUpdate() {
        try {
            int id = Integer.parseInt(idField.getText().trim());
            String type = typeChoice.getSelectedItem();
            int rating = Integer.parseInt(ratingField.getText().trim());
            String comments = commentsArea.getText().trim();

            service.update(new Feedback(id, type, rating, comments));
            statusOk("‚úèÔ∏è Updated ID " + id + " successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå ID and Rating must be numbers.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    private void onDelete() {
        try {
            int id = Integer.parseInt(idField.getText().trim());
            service.delete(id);
            statusOk("üóëÔ∏è Deleted ID " + id + " successfully.");
            clearFields();
            onReadAll();
        } catch (NumberFormatException ex) {
            statusErr("‚ùå ID must be a number.");
        } catch (SQLException ex) {
            statusErr("‚ö† DB Error: " + ex.getMessage());
        }
    }

    private void clearFields() {
        idField.setText("");
        ratingField.setText("");
        commentsArea.setText("");
        typeChoice.select(0);
        statusOk("Form cleared.");
    }

    private void statusOk(String msg) {
        statusLabel.setForeground(new Color(0, 128, 0));
        statusLabel.setText(msg);
        statusLabel.repaint();
    }

    private void statusErr(String msg) {
        statusLabel.setForeground(Color.RED);
        statusLabel.setText(msg);
        statusLabel.repaint();
    }
}
